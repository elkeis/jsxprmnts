{"version":3,"sources":["pages/image-slice/rick-and-morty.png","components/ImageSlice/sliceMath.js","components/ImageSlice/ImageSlice.js","components/ImageSlice/index.js","pages/image-slice/initial-data.js","components/PropertyControls/index.js","components/PropertyControls/PropertyControls.js","components/CSSEditor/CSSEditor.js","components/CSSEditor/index.js","pages/image-slice/image-slice.js","pages/image-slice/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","toRad","deg","Math","PI","ImageSlice","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","photoUrl","url","height","width","sliceCount","sliceAngle","sliceClassName","sliceClassNames","push","join","cssValues","v","concat","w","h","W","H","transform","dX","dY","alpha","sW","sH","margin","overflow","i","dx","dy","backgroundImage","backgroundSize","n","cosA","abs","cos","sinA","sin","calculateCssValues","buildSliceClassNames","sliceClass","slices","react_default","a","createElement","className","style","buildSliceStyle","key","buildSliceBackgroundStyle","buildImageSliceStyle","buildPhotoContainerSliceStyle","Component","initial_data","imageSlice","imageUrl","css","PropertyControls","name","value","type","onChange","buildOnChangeFunction","propertyName","event","defineProperty","target","renderTextControl","renderDigitControl","CSSEditor","state","setState","setCSS","bind","ImageSlicePage","objectSpread","initialData","propsObj","components_ImageSlice","components_PropertyControls","assign","setImageSliceProps","components_CSSEditor","App","pages_image_slice","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9839c1f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rick-and-morty.e232eb84.png\";","function toRad(deg) {\n    return deg * Math.PI / 180;\n}\n\n/**\n * \n * @param {*} w width of photo \n * @param {*} h height of photo\n * @param {*} n number of slices\n * @param {*} alpha angle of cut\n */\nexport function calculateCssValues (w, h, n, alpha) {\n    if (alpha < 0) {\n        alpha = 360 + alpha % 360\n    }\n    const cosA = Math.abs(Math.cos(toRad(alpha)));\n    const sinA = Math.abs(Math.sin(toRad(alpha)));\n    const H = h * cosA + w * sinA;\n    const W = w * cosA + h * sinA;\n    const dX = - (W - w) / 2;\n    const dY = - (H - h) / 2; \n    const dx = [];\n    const dy = [];\n    const sW = W;\n    const sH = H/n;\n    for (let i = 0; i < n; i++) {\n        dy.push(-sH*i - dY);\n        dx.push(-dX);\n    }\n    return {w, h, n, alpha, cosA, sinA, H, W, dX, dY, dx, dy, sH, sW };\n}","import React, {Component} from 'react';\nimport {calculateCssValues} from './sliceMath';\n\nconst DEFAULT_SLICE_CLASS_NAME = 'slice';\n\nclass ImageSlice extends Component {\n    constructor(props) {\n        super(props);\n\n        this.photoUrl = props.url;\n        this.height = props.height;\n        this.width = props.width;\n        this.sliceCount = props.sliceCount || 4;\n        this.sliceAngle = props.sliceAngle || 30;\n    }\n\n    buildSliceClassNames(sliceClassName) {\n        let sliceClassNames = [DEFAULT_SLICE_CLASS_NAME];\n        if (sliceClassName && sliceClassName !== DEFAULT_SLICE_CLASS_NAME ) {\n            sliceClassNames.push(sliceClassName);\n        }\n        return sliceClassNames.join(' ');\n    }\n\n    buildImageSliceStyle(cssValues) {\n        const v = cssValues;\n        return  {\n            width: `${v.w}px`,\n            height: `${v.h}px`,\n        };\n    }\n\n    buildPhotoContainerSliceStyle(cssValues) {\n        const v = cssValues;\n        return {\n            width: `${v.W}px`,\n            height: `${v.H}px`,\n            transform: `translate3d(${v.dX}px, ${v.dY}px, 0) rotate(-${v.alpha}deg)`,\n        };\n    }\n\n    buildSliceStyle(cssValues) {\n        const v = cssValues;\n        return {\n            width: `${v.sW}px`,\n            height: `${v.sH + 1}px`,\n            margin: '-1px 0px',\n            overflow: 'hidden'\n        };\n    }\n\n    buildSliceBackgroundStyle(cssValues, i) {\n        const v = cssValues;\n        let s = {\n            width: `${v.w}px`,\n            height: `${v.h}px`,\n            transform: `translate3d(${v.dx[i]}px, ${v.dy[i]}px, 0) rotate(${v.alpha}deg)`,\n            backgroundImage: `url(${this.props.url})`,\n            backgroundSize: `${v.w}px ${v.h}px`\n        };\n        return s;\n    }\n\n    render() {\n        const v = calculateCssValues(\n            this.props.width,\n            this.props.height,\n            this.props.sliceCount,\n            this.props.sliceAngle\n        );\n        const sliceClassNames = this.buildSliceClassNames(this.props.sliceClass);\n        const slices = [];\n        for (let i = 0; i < v.n; i++) {\n            slices.push(\n                <div className={sliceClassNames} style={this.buildSliceStyle(v)} key={i}>\n                    <div className=\"slice-background\" style={this.buildSliceBackgroundStyle(v, i)}></div>\n                </div>\n            );\n        }\n        return (\n            <div className=\"ImageSlice\" style={this.buildImageSliceStyle(v)}>\n                <div className=\"photo-container\" style={this.buildPhotoContainerSliceStyle(v)}>\n                    {slices}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ImageSlice;","import ImageSlice from './ImageSlice';\nexport default ImageSlice;\n\n","import imageUrl from './rick-and-morty.png';\n\nconst SLICE_CLASS = 'image-slice';\nexport default {\n    imageSlice: {\n        url: imageUrl,\n        width: 510,\n        height: 260,\n        sliceCount: 2,\n        sliceAngle: 76,\n        sliceClass: SLICE_CLASS\n    },\n    css: `@keyframes slice-glitch {\n            0% {\n                transform: translateX(0);\n            }\n            30% {\n                transform: translateX(-5px);\n            }\n            60% {\n                transform: translateX(5px);\n            }\n            100% {\n                transform: translateX(0);\n            }\n            \n        }\n        \n        \n        .${SLICE_CLASS}:nth-child(odd) {\n            filter: hue-rotate(85deg);\n            animation: slice-glitch .2s linear .0s infinite alternate;\n        }\n        .${SLICE_CLASS}:nth-child(even) {\n                filter: hue-rotate(-85deg);\n                animation: slice-glitch .2s linear .1s infinite alternate;\n        }`\n}","import PropertyControls from './PropertyControls';\n\nexport default PropertyControls;","import React, {Component} from 'react';\n\nclass PropertyControls extends Component {\n\n    renderDigitControl(name, value) {\n        return (\n            <div className=\"digit-control\">\n                <label>{name}</label>\n                <input type=\"number\" value={value} onChange={this.buildOnChangeFunction(name)}></input>\n                <span>{value}</span>\n            </div>\n        )\n    }\n\n    renderTextControl(name, value) {\n        return (\n            <div className=\"digit-control\">\n                <label>{name}</label>\n                <input type=\"text\" value={value} onChange={this.buildOnChangeFunction(name)}></input>\n                <span>{value}</span>\n            </div>\n        )\n    }\n\n    buildOnChangeFunction(propertyName) {\n        const onChange = (event) => {\n            this.props.onChange({\n                [propertyName]: event.target.value \n            });\n        };\n        return onChange;\n    } \n\n    render() {\n        return (\n            <div className=\"property-controls\">\n                {this.renderTextControl('url', this.props.url)}\n                {this.renderTextControl('sliceClass', this.props.sliceClass)}\n                {this.renderDigitControl('width', this.props.width)}\n                {this.renderDigitControl('height', this.props.height)}\n                {this.renderDigitControl('sliceCount', this.props.sliceCount)}\n                {this.renderDigitControl('sliceAngle', this.props.sliceAngle)}\n            </div>\n        )\n    }\n}\n\nexport default PropertyControls;","import React, {Component} from 'react';\n\nclass CSSEditor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            css: props.css\n        };\n    }\n    \n    setCSS(event) {\n        this.setState({\n            css: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"CSSEditor\">\n                <textarea value={this.state.css} onChange={this.setCSS.bind(this)}></textarea>\n                <style>{this.state.css}</style>\n            </div>\n        );\n    }\n}\n\nexport default CSSEditor;","import CSSEditor from './CSSEditor';\nimport './CSSEditor.scss';\n\nexport default CSSEditor;","import React, {Component} from 'react';\nimport ImageSlice from '../../components/ImageSlice';\nimport initialData from './initial-data';\nimport PropertyControls from '../../components/PropertyControls';\nimport CSSEditor from '../../components/CSSEditor';\n\nclass ImageSlicePage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            imageSlice: {\n                ...initialData.imageSlice\n            },\n            css: initialData.css\n        }\n    }\n\n    setImageSliceProps(propsObj) {\n        this.setState({\n            imageSlice: {...this.state.imageSlice, ...propsObj}\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"image-slice-page\">\n                <div className=\"component-area\">\n                    <div className=\"image-container\">\n                        <div className=\"image\">\n                            <ImageSlice\n                                {...this.state.imageSlice}\n                            >\n                            </ImageSlice>\n                        </div>\n                    </div>\n                    <div className=\"component-property-controls\">\n                        <PropertyControls \n                            {...this.state.imageSlice}\n                            onChange={this.setImageSliceProps.bind(this)}\n                        >\n                        </PropertyControls>\n                        {/* <div className=\"component-control\">\n                            <div className=\"control-name\">\n                            \n                            </div>\n                            <div className=\"control-item\">\n                            \n                            </div>\n                            <div className=\"control-value\">\n                            \n                            </div>\n                        </div> */}\n                    </div>\n                </div>\n                <div className=\"styles-area\">\n                    <CSSEditor\n                        css={this.state.css}\n                    ></CSSEditor>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ImageSlicePage;","import ImageSlicePage from './image-slice';\nimport './image-slice.scss';\nexport default ImageSlicePage;","import React, { Component } from 'react';\nimport './App.scss';\nimport ImageSlicePage from './pages/image-slice';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ImageSlicePage></ImageSlicePage>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}